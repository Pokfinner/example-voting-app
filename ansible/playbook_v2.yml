---
- name: Configure and deploy Voting App
  hosts: all
  become: true
  vars:
    vote_app_image: "ghenac/voting-app:vote"
    result_app_image: "ghenac/voting-app:result"
    worker_app_image: "dockersamples/examplevotingapp_worker:latest"

    vote_port: "8080"
    result_port: "8081"

  tasks:
##### Install Docker on EC2 Instances #####
    - name: Install Docker on all instances
      apt:
        name: docker.io
        state: present
        update_cache: yes

    - name: Add user to Docker group
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes

    - name: Start Docker service
      service:
        name: docker
        state: started
        enabled: yes

    - name: Verify Docker installation
      command: docker version
      register: docker_status

    - name: Debug Docker installation output
      debug:
        msg: "{{ docker_status.stdout_lines }}"

##### Pull and Run Containers #####
    
    # Vote Service #
    - name: Pull Vote App image
      docker_image:
        name: "{{ vote_app_image }}"
        source: pull

    - name: Run the Vote App container
      docker_container:
        name: vote-service
        image: "{{ vote_app_image }}"
        ports:
          - "{{ vote_port }}:80"
        state: started
        restart_policy: always
        env:
          REDIS_HOST: "redis.internal"

    # Result Service #
    - name: Pull Result App image
      docker_image:
        name: "{{ result_app_image }}"
        source: pull

    - name: Run the Result App container
      docker_container:
        name: result-service
        image: "{{ result_app_image }}"
        ports:
          - "{{ result_port }}:80"
        state: started
        restart_policy: always
        env:
          DATABASE_HOST: "db.internal"

    # Worker Service #
    - name: Pull Worker App image
      docker_image:
        name: "{{ worker_app_image }}"
        source: pull

    - name: Run the Worker App container
      docker_container:
        name: worker-service
        image: "{{ worker_app_image }}"
        state: started
        restart_policy: always

    ##### Verify Deployment #####
    - name: List running Docker containers
      shell: docker ps
      register: running_containers

    - name: Display running containers
      debug:
        msg: "{{ running_containers.stdout_lines }}"
